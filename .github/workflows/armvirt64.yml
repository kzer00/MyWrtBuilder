# This is a basic workflow to help you get started with Actions

name: Generate armvirt_64 Firmware

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    #inputs:
     # release: 
      #  description: Upload the compiled image to Release
       # required: false
       # default: 'true'

env:
  DOWNLOAD_BASE: https://downloads.openwrt.org
  VENDOR: openwrt
  VERSION: 22.03.3

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Generate:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Initialization Environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python qemu-utils mkisofs

      - name: Setup Environment Variables
        run: |
          echo "DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
          echo "DATETIME=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3
        with: 
          path: origin

      - name: Download Image Builder
        run: |
          wget $DOWNLOAD_BASE/releases/$VERSION/targets/armvirt/64/$VENDOR-imagebuilder-$VERSION-armvirt-64.Linux-x86_64.tar.xz
          tar -xvf $VENDOR-imagebuilder-$VERSION-armvirt-64.Linux-x86_64.tar.xz
          rm -rf $VENDOR-imagebuilder-$VERSION-armvirt-64.Linux-x86_64.tar.xz
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/$VENDOR-imagebuilder-$VERSION-armvirt-64.Linux-x86_64/
      
      - name: Run Patch and DIY Scripts
        working-directory: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-armvirt-64.Linux-x86_64
        run: |
          bash scripts/builder-patch2.sh
          #bash scripts/clash.sh
          #bash scripts/zsh.sh

      - name: Generate Firmware
        working-directory: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-armvirt-64.Linux-x86_64
        run: |
          bash armvirt-build.sh

      - name: Upload Firmware to Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.VENDOR }}-${{ env.VERSION }}-rootfs-armvirt-64-${{ env.DATETIME }}
          path: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-armvirt-64.Linux-x86_64/bin/targets/armvirt/64/*

      - name: Upload Firmware to Release
       # if: github.event.inputs.release == 'true'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.all_TOKEN }}
          file_glob: true
          file: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-armvirt-64.Linux-x86_64/bin/packages/armvirt/64/*
          asset_name: ${{ github.event.repository.name }}-${{ github.sha }}
          tag: release-${{ env.DATE }}
          overwrite: true
